import net.fabricmc.loom.task.RemapJarTask

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

plugins {
    id "fabric-loom" version "0.5-SNAPSHOT"
    id "maven-publish"
    id "java-library"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

archivesBaseName = project.archives_base_name
group = project.maven_group

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    archivesBaseName = project.name
}

allprojects {
    apply plugin: "fabric-loom"
    apply plugin: "com.jfrog.bintray"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    version = rootProject.mod_version

    repositories {
        maven {
            name = "FabricMC"
            url = "https://maven.fabricmc.net"
        }
        maven {
            url = "https://dl.bintray.com/bymartrixx/maven"
        }
    }

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        modImplementation "io.github.bymartrixx.wdmcf:wdmcf:1.0.1"
    }

    processResources {
        // this will ensure that this task is redone when there"s a change
        inputs.property "version", project.version

        // replace stuff in fabric.mod.json, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"

            // add mod metadata
            expand "version": project.version
        }

        // copy everything else, that"s not the fabric.mod.json
        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this task, sources will not be generated.
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    jar {
        from "LICENSE"
    }

    // TODO: License checker
}

subprojects {
    version = rootProject.version
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    // used by the test mod
    modImplementation fabricApi.module("fabric-api-base", rootProject.fabric_version)
    modImplementation fabricApi.module("fabric-command-api-v1", rootProject.fabric_version)

    testCompileOnly "com.google.code.findbugs:jsr305:3.0.2"

    afterEvaluate {
        subprojects.each {
            api it
            include it
        }
    }
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'PlayerEventsTest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'PlayerEventsTest'
    input = testmodJar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)
remapJar.dependsOn("player-events-api:remapJar")

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
    publications = ["mavenJava"]
    publish = true
    pkg {
        repo = 'maven'
        name = 'player_events'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/ByMartrixx/player-events.git'
        version {
            released = new Date()
            githubRepo = 'ByMartrixx/player-events'
            websiteUrl = 'https://github.com/ByMartrixx/player-events'
            issueTrackerUrl = 'https://github.com/ByMartrixx/player-events/issues'
            vcsUrl = 'https://github.com/ByMartrixx/player-events.git'
            gpg {
                sign = true
            }
        }
    }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A mod that executes and sends configurable commands and messages respectively when a player does something.')
                root.appendNode('name', 'Player Events')
                root.appendNode('url', 'https://github.com/ByMartrixx/player-events')
            }
            groupId("${project.maven_group}")
            artifactId 'player-events'
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

curseforge {
    if (project.hasProperty('curse_api_key') || System.getenv('CURSE_API_KEY') != null) {
        apiKey = project.hasProperty('curse_api_key') ? project.property('curse_api_key') : System.getenv('CURSE_API_KEY')
    }
    project {
        id = '404348'
        changelog = 'A changelog can be found at https://github.com/ByMartrixx/player-events/releases/latest'
        releaseType = 'release'
        addGameVersion '1.16'
        addGameVersion '1.16.1'
        addGameVersion '1.16.2'
        addGameVersion '1.16.3'
        addGameVersion '1.16.4'
        addGameVersion 'Fabric'
        mainArtifact(remapJar) {
            displayName = "Player Events $version $project.minecraft_version"
        }
        addArtifact(project(':player-events-api').buildDir.absolutePath + "/libs/" + project(':player-events-api').name + "-${project.version}.jar") {
            displayName = "Player Events API $version $project.minecraft_version"
        }
        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
    options {
        forgeGradleIntegration = false
    }
}